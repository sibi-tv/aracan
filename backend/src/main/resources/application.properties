spring.application.name=Aracan backend API

# =======================================
# DATABASE (PostgreSQL on AWS RDS)
# =======================================
spring.datasource.url=jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# =======================================
# JPA / HIBERNATE SETTINGS
# =======================================
# This tells Hibernate to use the PostgreSQL-specific SQL dialect.
# Spring Boot is smart and can often infer this, but it's good practice to be explicit.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# DDL (Data Definition Language) strategy.
# "update" will check your Java @Entity classes against the database schema
# and automatically add tables, columns, etc. It will not delete columns.
# PERFECT for development. Use 'validate' or 'none' in production.
spring.jpa.hibernate.ddl-auto=update

# Show the actual SQL queries in the console log.
# Incredibly useful for debugging.
spring.jpa.show-sql=true
